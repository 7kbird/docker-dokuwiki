#!/bin/sh

set -e

# $1 config name support format like 'plugin>smtp>smtp_host' with '>' as seperator
# $2 config value, if value is empty, config will be removed
update_doku_config() {
  IFS='>' read -r -a CONFIG_NAMES <<< ${1}
  local CONFIG_VALUE=${2}

  if [ -f ${DOKUWIKI_LOCAL_CONFIG} ]; then
    local CONFIG_FILE=${DOKUWIKI_LOCAL_CONFIG}
  else
    [[ ! -f ${DOKUWIKI_INSTALLER_CONFIG} ]] && touch ${DOKUWIKI_INSTALLER_CONFIG}
    local CONFIG_FILE=${DOKUWIKI_INSTALLER_CONFIG}
  fi

  local CONFIG_LEFT="\$conf"$(printf "['%s']" "${CONFIG_NAMES[@]}")
  local CONFIG_LEFT_REG="\$conf"$(printf "\['%s'\]" "${CONFIG_NAMES[@]}")

  if [[ -z "${CONFIG_VALUE}" ]]; then  # Remove config if value is empty
    # Try update first
    sed -i "s/^${CONFIG_LEFT_REG}.*//" ${CONFIG_FILE}
  else
    if ! [[ "${CONFIG_VALUE}" =~ ^[0-9]+([.][0-9]+)?$ ]] ; then
      # add quote for string
      CONFIG_VALUE="'"${CONFIG_VALUE}"'"
    fi
    sed -i "s/^${CONFIG_LEFT_REG}.*/${CONFIG_LEFT} = ${CONFIG_VALUE};/" ${CONFIG_FILE}
    # Append if not exist
    if [[ -z $(grep -i "^${CONFIG_LEFT_REG}" "${CONFIG_FILE}" ) ]]; then
      echo "${CONFIG_LEFT} = ${CONFIG_VALUE};" >> ${CONFIG_FILE}
    fi
  fi
}

# $1: file with placeholder to replace
# $x: placeholders to replace
update_template() {
  local FILE=${1?missing argument}
  shift

  [[ ! -f ${FILE} ]] && return 1

  local VARIABLES=($@)
  local tmp_file=$(mktemp)
  cp -a "${FILE}" ${tmp_file}

  # Replace placeholders
  (
    export ${VARIABLES[@]}
    local IFS=":"; envsubst "${VARIABLES[*]/#/$}" < ${tmp_file} > ${FILE}
  )
  rm -f ${tmp_file}
}

dokuwiki_setup_userewrite() {
  DOKUWIKI_USEREWRITE_DEFAULT_COMMENT=""
  DOKUWIKI_USEREWRITE_WEBSERVER_COMMENT="#"
  case ${DOKUWIKI_USEREWRITE} in
    webserver)
      echo "Dokuwiki: [userewrite:webserver] 1"
      DOKUWIKI_USEREWRITE_DEFAULT_COMMENT="#"
      DOKUWIKI_USEREWRITE_WEBSERVER_COMMENT=""
      DOKUWIKI_USEREWRITE_VALUE=1
      ;;
    internal)
      echo "Dokuwiki: [userewrite:internal] 2"
      DOKUWIKI_USEREWRITE_VALUE=2
      ;;
    *)
      echo "Dokuwiki: [userewrite:none] 0"
      echo "${DOKUWIKI_USEREWRITE}Default"
      DOKUWIKI_USEREWRITE_VALUE=0
      ;;
  esac
  
  update_template ${NGINX_DOKUWIKI_CONFIG} \
    DOKUWIKI_USEREWRITE_DEFAULT_COMMENT \
    DOKUWIKI_USEREWRITE_WEBSERVER_COMMENT
  
  update_doku_config "userewrite" ${DOKUWIKI_USEREWRITE_VALUE}
}

dokuwiki_setup_smtp() {
  case ${DOKUWIKI_SMTP_SSL} in
    ssl)
      echo "Dokuwiki: [smtp_ssl:ssl]"
      DOKUWIKI_SMTP_PORT=${DOKUWIKI_SMTP_PORT:-465}
      ;;
    tls)
      echo "Dokuwiki: [smtp_ssl:tls]"
      DOKUWIKI_SMTP_PORT=${DOKUWIKI_SMTP_PORT:-464}
      ;;
    *)
      [[ "${DOKUWIKI_SMTP_SSL}" ]] && echo "stmp_ssl support only ssl/tls or emtpy" && return 1
      echo "Dokuwiki: [smtp_ssl:none]"
      DOKUWIKI_SMTP_PORT=${DOKUWIKI_SMTP_PORT:-25}
      ;;
  esac
  update_doku_config "plugin>smtp>smtp_host" ${DOKUWIKI_SMTP_HOST}
  update_doku_config "plugin>smtp>smtp_port" ${DOKUWIKI_SMTP_PORT}
  update_doku_config "plugin>smtp>smtp_ssl" ${DOKUWIKI_SMTP_SSL}
  update_doku_config "plugin>smtp>auth_user" ${DOKUWIKI_SMTP_USER}
  update_doku_config "plugin>smtp>auth_pass" ${DOKUWIKI_SMTP_PASS}
  update_doku_config "plugin>smtp>localdomain" ${DOKUWIKI_DOMAIN}
  update_doku_config "mailfrom" ${DOKUWIKI_MAILFROM}
}

dokuwiki_config_setup() {
  dokuwiki_setup_userewrite
  dokuwiki_setup_smtp
}
